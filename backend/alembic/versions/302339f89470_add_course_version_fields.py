"""Add course version fields

Revision ID: 302339f89470
Revises: fb0a84d36981
Create Date: 2025-09-20 04:30:56.151764

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '302339f89470'
down_revision: Union[str, Sequence[str], None] = 'fb0a84d36981'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_video_chunks_document'), table_name='video_chunks')
    op.drop_index(op.f('idx_video_chunks_time'), table_name='video_chunks')
    op.drop_table('video_chunks')
    op.drop_index(op.f('idx_video_segments_doc_time'), table_name='video_segments')
    op.drop_index(op.f('idx_video_segments_segment'), table_name='video_segments')
    op.drop_table('video_segments')
    op.drop_index(op.f('idx_relationships_source'), table_name='document_relationships')
    op.drop_index(op.f('idx_relationships_target'), table_name='document_relationships')
    op.drop_table('document_relationships')
    op.drop_index(op.f('idx_documents_title'), table_name='documents')
    op.drop_table('documents')
    op.drop_table('admin_documents')
    op.drop_index(op.f('idx_analytics_session'), table_name='analytics_events')
    op.drop_index(op.f('idx_analytics_type'), table_name='analytics_events')
    op.drop_table('analytics_events')
    op.drop_index(op.f('idx_sessions_session_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.add_column('lms_course_versions', sa.Column('thumbnail_url', sa.Text(), nullable=True))
    op.add_column('lms_course_versions', sa.Column('duration_hours', sa.Numeric(precision=5, scale=2), nullable=True))
    op.add_column('lms_course_versions', sa.Column('difficulty_level', sa.String(length=50), nullable=True))
    op.add_column('lms_course_versions', sa.Column('prerequisites', postgresql.ARRAY(sa.Text()), nullable=True))
    op.add_column('lms_course_versions', sa.Column('learning_outcomes', postgresql.ARRAY(sa.Text()), nullable=True))
    op.add_column('lms_course_versions', sa.Column('is_published', sa.Boolean(), nullable=True))
    op.add_column('lms_course_versions', sa.Column('settings', sa.JSON(), nullable=True))
    op.add_column('lms_course_versions', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))

    # Set default values for existing rows
    op.execute("UPDATE lms_course_versions SET prerequisites = '{}' WHERE prerequisites IS NULL")
    op.execute("UPDATE lms_course_versions SET learning_outcomes = '{}' WHERE learning_outcomes IS NULL")
    op.execute("UPDATE lms_course_versions SET settings = '{}' WHERE settings IS NULL")
    op.execute("UPDATE lms_course_versions SET is_published = false WHERE is_published IS NULL")

    # Now make the columns non-nullable
    op.alter_column('lms_course_versions', 'prerequisites', nullable=False)
    op.alter_column('lms_course_versions', 'learning_outcomes', nullable=False)
    op.alter_column('lms_course_versions', 'settings', nullable=False)
    op.drop_constraint(op.f('lms_course_versions_course_id_version_number_key'), 'lms_course_versions', type_='unique')
    op.drop_constraint(op.f('lms_enrollments_user_id_cohort_id_key'), 'lms_enrollments', type_='unique')
    op.drop_constraint(op.f('lms_organizations_slug_key'), 'lms_organizations', type_='unique')
    op.drop_constraint(op.f('lms_users_email_key'), 'lms_users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint(op.f('lms_users_email_key'), 'lms_users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('lms_organizations_slug_key'), 'lms_organizations', ['slug'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('lms_enrollments_user_id_cohort_id_key'), 'lms_enrollments', ['user_id', 'cohort_id'], postgresql_nulls_not_distinct=False)
    op.create_unique_constraint(op.f('lms_course_versions_course_id_version_number_key'), 'lms_course_versions', ['course_id', 'version_number'], postgresql_nulls_not_distinct=False)
    op.drop_column('lms_course_versions', 'updated_at')
    op.drop_column('lms_course_versions', 'settings')
    op.drop_column('lms_course_versions', 'is_published')
    op.drop_column('lms_course_versions', 'learning_outcomes')
    op.drop_column('lms_course_versions', 'prerequisites')
    op.drop_column('lms_course_versions', 'difficulty_level')
    op.drop_column('lms_course_versions', 'duration_hours')
    op.drop_column('lms_course_versions', 'thumbnail_url')
    op.create_table('user_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_context', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('user_sessions_pkey')),
    sa.UniqueConstraint('session_id', name=op.f('user_sessions_session_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_sessions_session_id'), 'user_sessions', ['session_id'], unique=False)
    op.create_table('analytics_events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_events_pkey'))
    )
    op.create_index(op.f('idx_analytics_type'), 'analytics_events', ['event_type'], unique=False)
    op.create_index(op.f('idx_analytics_session'), 'analytics_events', ['session_id'], unique=False)
    op.create_table('admin_documents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('document_source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('author', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('publication_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunking_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('upload_timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('human_capability_domain', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('allow_download', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('show_in_viewer', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('file_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content_type', sa.VARCHAR(length=50), server_default=sa.text("'document'::character varying"), autoincrement=False, nullable=True),
    sa.Column('duration', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('video_width', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('video_height', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transcript_language', sa.VARCHAR(length=10), server_default=sa.text('NULL::character varying'), autoincrement=False, nullable=True),
    sa.Column('has_audio', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('video_format', sa.VARCHAR(length=50), server_default=sa.text('NULL::character varying'), autoincrement=False, nullable=True),
    sa.Column('thumbnail_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='admin_documents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('documents',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('concepts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('num_sections', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('num_chunks', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('display_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('document_source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('publication_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunking_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('upload_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='documents_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_documents_title'), 'documents', ['title'], unique=False)
    op.create_table('document_relationships',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('source_doc_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('target_doc_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('relationship_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.REAL(), autoincrement=False, nullable=True),
    sa.Column('shared_concepts', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_doc_id'], ['documents.id'], name=op.f('document_relationships_source_doc_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_doc_id'], ['documents.id'], name=op.f('document_relationships_target_doc_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('document_relationships_pkey'))
    )
    op.create_index(op.f('idx_relationships_target'), 'document_relationships', ['target_doc_id'], unique=False)
    op.create_index(op.f('idx_relationships_source'), 'document_relationships', ['source_doc_id'], unique=False)
    op.create_table('video_segments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('segment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tokens', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('avg_logprob', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('compression_ratio', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('no_speech_prob', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['admin_documents.id'], name=op.f('video_segments_document_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('video_segments_pkey'))
    )
    op.create_index(op.f('idx_video_segments_segment'), 'video_segments', ['document_id', 'segment_id'], unique=False)
    op.create_index(op.f('idx_video_segments_doc_time'), 'video_segments', ['document_id', 'start_time'], unique=False)
    op.create_table('video_chunks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('chunk_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('segment_ids', postgresql.ARRAY(sa.INTEGER()), server_default=sa.text("'{}'::integer[]"), autoincrement=False, nullable=True),
    sa.Column('timestamp_display', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('duration_display', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('avg_confidence', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.5'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['admin_documents.id'], name=op.f('video_chunks_document_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('video_chunks_pkey')),
    sa.UniqueConstraint('chunk_id', name=op.f('video_chunks_chunk_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_video_chunks_time'), 'video_chunks', ['document_id', 'start_time', 'end_time'], unique=False)
    op.create_index(op.f('idx_video_chunks_document'), 'video_chunks', ['document_id'], unique=False)
    # ### end Alembic commands ###
